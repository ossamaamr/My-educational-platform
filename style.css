/* General Body and HTML structure */
body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f7f6;
    color: #333;
    direction: rtl; /* For Arabic text alignment */
    text-align: right; /* For Arabic text alignment */
}

/* Welcome Screen */
#welcome-screen {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f2f5;
}
#welcome-screen > div {
    background-color: #ffffff;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    text-align: center;
    max-width: 400px;
    width: 90%;
}
#welcome-screen h1 {
    color: #333;
    margin-bottom: 25px;
    font-size: 2em;
}
#welcome-screen p {
    color: #666;
    margin-bottom: 30px;
    font-size: 1.1em;
}
#userNameInput {
    width: calc(100% - 20px);
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1em;
    text-align: center;
}

/* General Button Styles */
button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 12px 30px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1.1em;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
}
button:hover {
    background-color: #0056b3;
    transform: translateY(-2px);
}
#removeMainBookButton, #removeMainAudioBookButton { /* Changed from replace to remove */
    background-color: #dc3545;
}
#removeMainBookButton:hover, #removeMainAudioBookButton:hover {
    background-color: #c82333;
}
#chooseFileButton, #chooseAudioFileButton {
    background-color: #28a745;
}
#chooseFileButton:hover, #chooseAudioFileButton:hover {
    background-color: #218838;
}
#saveNotesButton {
    background-color: #ffc107; /* Orange for notes save */
    color: #333;
    margin-top: 20px;
}
#saveNotesButton:hover {
    background-color: #e0a800;
    transform: translateY(-2px);
}


/* Dashboard Layout */
#dashboard {
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden; /* Prevent body scroll, main will scroll */
}

/* Header */
header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 25px;
    background-color: #fff;
    border-bottom: 1px solid #eee;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}
header h1 {
    color: #333;
    font-size: 1.8em;
    margin: 0;
}
header p {
    color: #555;
    font-size: 1.1em;
    margin: 0;
}
#displayedUserName {
    color: #007bff;
}

/* Main Dashboard Content Area (Sidebar + Main Content) */
.dashboard-content-area {
    display: flex;
    flex-grow: 1; /* Take remaining vertical space */
    min-height: calc(100vh - 70px); /* Adjust based on header height */
}

/* Sidebar */
aside {
    width: 250px;
    background-color: #2c3e50;
    color: white;
    padding: 25px;
    box-shadow: 2px 0 10px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-shrink: 0; /* Prevent shrinking */
    overflow-y: auto; /* Enable scrolling for sidebar if content overflows */
}
aside h2 {
    margin-bottom: 30px;
    color: #ecf0f1;
    font-size: 1.5em;
}
.progress-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background-color: #34495e;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5em;
    font-weight: bold;
    color: #2ecc71;
    border: 5px solid #2ecc71;
    box-shadow: 0 0 15px rgba(0,0,0,0.3);
}
aside p {
    margin-top: 20px;
    font-size: 1.1em;
    text-align: center;
    color: #bdc3c7;
}
aside ul {
    list-style: none;
    padding: 0;
    margin-top: 40px;
    width: 100%;
}
.sidebar-item {
    padding: 12px 15px;
    cursor: pointer;
    border-radius: 5px;
    margin-bottom: 8px;
    transition: background-color 0.3s ease, transform 0.2s ease;
    font-size: 1em;
    text-align: center;
}
.sidebar-item:hover {
    background-color: #34495e;
    transform: translateX(5px);
}
.sidebar-item.active {
    background-color: #007bff;
    color: white;
    font-weight: bold;
}

/* Main Content Area */
main {
    flex-grow: 1;
    padding: 30px;
    overflow-y: auto; /* Enable scrolling for main content */
}
.card {
    background-color: #fff;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    margin-bottom: 30px; /* Spacing between cards if multiple */
}
.card h1, .card h2, .card h3 {
    color: #333;
    margin-bottom: 25px;
    font-size: 2em; /* Adjusted for consistency */
}
.card p {
    color: #555;
    line-height: 1.6;
    margin-bottom: 30px;
}
.note {
    margin-top: 30px;
    color: #777;
    font-size: 0.9em;
    text-align: center;
}

/* New Main Dashboard Buttons Grid */
.main-buttons-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 25px;
    padding: 20px;
    justify-content: center;
    align-items: center;
    max-width: 1000px; /* Limit width */
    margin: 40px auto; /* Center the grid */
}

.main-action-button {
    background-color: #007bff; /* Primary blue */
    color: white;
    font-size: 1.6em;
    padding: 30px 20px;
    border-radius: 15px;
    box-shadow: 0 6px 15px rgba(0, 123, 255, 0.3);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    min-height: 150px; /* Make buttons larger */
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
}
.main-action-button:hover {
    background-color: #0056b3;
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 123, 255, 0.4);
}
.main-action-button i {
    font-size: 2.5em; /* Icon size */
    margin-bottom: 15px;
}
.main-action-button span {
    font-weight: bold;
    font-size: 0.8em; /* Adjust text size relative to button */
}

/* Specific colors for some main buttons */
#listenToExplanationButton {
    background-color: #28a745; /* Green */
    box-shadow: 0 6px 15px rgba(40, 167, 69, 0.3);
}
#listenToExplanationButton:hover {
    background-color: #218838;
    box-shadow: 0 10px 25px rgba(40, 167, 69, 0.4);
}

#takeQuizButton {
    background-color: #ffc107; /* Yellow/Orange */
    color: #333; /* Dark text for contrast */
    box-shadow: 0 6px 15px rgba(255, 193, 7, 0.3);
}
#takeQuizButton:hover {
    background-color: #e0a800;
    box-shadow: 0 10px 25px rgba(255, 193, 7, 0.4);
}

#goToNotesButton {
    background-color: #6f42c1; /* Purple */
    box-shadow: 0 6px 15px rgba(111, 66, 193, 0.3);
}
#goToNotesButton:hover {
    background-color: #5d35a7;
    box-shadow: 0 10px 25px rgba(111, 66, 193, 0.4);
}


/* Quick Access Info on Main Page */
#main-page-selected-book-info {
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 20px;
    background-color: #f9f9f9;
    margin-top: 25px;
}
#main-page-selected-book-info h3 {
    margin-top: 0;
    color: #007bff;
    font-size: 1.5em;
}
#main-page-selected-book-info button {
    margin-top: 15px;
    padding: 10px 20px;
    font-size: 1em;
}
#currentMainAudioPlayer {
    width: 100%;
    margin-top: 20px;
}


/* Books Grid (for My Books, Audio Books, Lessons) */
.books-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}
.book-card, .audio-book-card {
    background-color: #f0f8ff;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: transform 0.2s ease;
}
.book-card:hover, .audio-book-card:hover {
    transform: translateY(-5px);
}
.book-card h3, .audio-book-card h3 {
    color: #007bff;
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.3em;
}
.book-card button, .audio-book-card button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.95em;
    transition: background-color 0.3s ease;
    margin-top: 5px; /* Added margin for multiple buttons */
}
.book-card button:hover, .audio-book-card button:hover {
    background-color: #218838;
}
.add-questions-button, .select-book-for-main-button, .select-audio-for-main-button {
    background-color: #6c757d !important; /* Override general button style */
    margin-top: 10px;
}
.add-questions-button:hover, .select-book-for-main-button:hover, .select-audio-for-main-button:hover {
    background-color: #5a6268 !important;
}
#noBooksMessage, #noAudioBooksMessage, #noLessonTextBooksMessage, #noLessonAudioBooksMessage {
    color: #666;
    text-align: center;
    grid-column: 1 / -1; /* Span across all columns in grid */
}

/* Book Management Section Specifics */
#currentBookDisplay, #currentAudioBookDisplay {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    background-color: #f9f9f9;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
#currentBookDisplay h3, #currentAudioBookDisplay h3 {
    color: #007bff;
    margin-top: 0;
    margin-bottom: 10px;
}
#currentBookName, #currentAudioBookNameSecondary { /* Changed ID here */
    font-size: 1.2em;
    font-weight: bold;
    color: #555;
}
#selectedFileName, #selectedAudioFileName {
    margin-top: 20px;
    color: #888;
    font-style: italic;
    text-align: center;
}
#uploadBookButton, #uploadAudioBookButton {
    margin-top: 20px;
}

/* Daily Schedule Section */
.daily-schedule-grid {
    display: grid;
    grid-template-columns: 1fr 2fr; /* Day column narrower, Books column wider */
    gap: 15px;
    margin-top: 20px;
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 20px;
    background-color: #f9f9f9;
}
.daily-schedule-grid h3 {
    background-color: #e9e9e9;
    padding: 10px;
    border-radius: 5px;
    text-align: center;
    margin-top: 0;
    font-size: 1.1em;
    color: #444;
}
.daily-schedule-grid div {
    padding: 5px;
}
.daily-schedule-item {
    display: contents; /* Allows grid items to flow without creating new rows */
}
.daily-schedule-item label {
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #eef;
    border-radius: 5px;
    padding: 8px;
    font-size: 1em;
    color: #333;
}
.daily-schedule-item textarea {
    width: calc(100% - 20px);
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 0.95em;
    min-height: 60px;
    resize: vertical;
    margin-bottom: 10px; /* Space between textareas */
}
.daily-schedule-item button {
    background-color: #007bff;
    padding: 8px 15px;
    font-size: 0.9em;
    font-weight: normal;
    margin-top: 5px;
}

/* Progress Tracking Section */
.progress-book-item {
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0,0,0,0.03);
}
.progress-book-item h3 {
    color: #007bff;
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 1.4em;
}
.progress-book-item input[type="number"] {
    width: 80px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    text-align: center;
    font-size: 1em;
    margin-left: 10px; /* Spacing next to label */
}
.progress-book-item button {
    background-color: #28a745;
    padding: 8px 15px;
    font-size: 0.95em;
    margin-top: 10px;
}
.progress-book-item p {
    margin-top: 15px;
    font-weight: bold;
    color: #555;
}
.progress-book-item span.percentage {
    color: #2ecc71;
}

/* Detailed Statistics Section - NEW Feature 4 */
#detailed-statistics-content canvas {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 25px;
    border: 1px solid #eee;
}
#time-spent-stats p {
    font-size: 1.1em;
    color: #444;
    margin-bottom: 8px;
}

/* Gamification Section - NEW Feature 2 */
.badges-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 15px;
    margin-top: 20px;
    padding: 10px;
    border: 1px dashed #ccc;
    border-radius: 10px;
    min-height: 100px;
    align-items: center;
    justify-content: center;
}
.badge-item {
    text-align: center;
    padding: 10px;
    background-color: #e6f7ff;
    border: 1px solid #b3e0ff;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}
.badge-item i {
    font-size: 2.5em;
    color: #007bff;
    margin-bottom: 5px;
}
.badge-item p {
    font-size: 0.9em;
    font-weight: bold;
    color: #333;
    margin: 0;
}
#upcoming-goals p {
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #eee;
    margin-bottom: 8px;
    font-size: 0.95em;
}
#upcoming-goals span {
    font-weight: bold;
    color: #28a745;
}


/* Quizzes Section */
.quiz-book-item {
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0,0,0,0.03);
}
.quiz-book-item h3 {
    color: #007bff;
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.4em;
}
/* New Quiz elements */
.quiz-book-item select,
.quiz-book-item input[type="text"] { /* For choice options */
    width: calc(100% - 20px);
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
}
.quiz-book-item textarea {
    width: calc(100% - 20px);
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    min-height: 80px;
    margin-bottom: 10px;
    resize: vertical;
}
.quiz-book-item button {
    background-color: #007bff;
    padding: 10px 20px;
    font-size: 1em;
}
.quiz-book-item .questions-list {
    margin-top: 20px;
    border-top: 1px dashed #eee;
    padding-top: 15px;
}
.quiz-book-item .question-entry {
    background-color: #eef;
    padding: 10px 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    position: relative;
}
.quiz-book-item .question-entry strong {
    display: block;
    margin-bottom: 5px;
    color: #333;
}
.quiz-book-item .delete-question-button {
    background-color: #dc3545;
    color: white;
    font-size: 0.8em;
    padding: 5px 10px;
    border-radius: 5px;
    position: absolute;
    top: 10px;
    left: 10px;
    transform: translateY(0); /* Reset transform from general button hover */
    margin: 0; /* Reset margin */
}
.quiz-book-item .delete-question-button:hover {
    background-color: #c82333;
    transform: translateY(0);
}


/* Notes Section */
#notesArea {
    width: calc(100% - 20px);
    height: 400px; /* Ample space for notes */
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 10px;
    font-size: 1.1em;
    line-height: 1.6;
    resize: vertical; /* Allow vertical resizing */
    margin-bottom: 20px;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
}

/* Data Management Section - NEW Feature 5 */
#data-management-content button {
    margin-top: 15px;
    margin-left: 10px; /* Space between buttons */
}
#data-management-content p {
    font-size: 1em;
    margin-top: 15px;
}
#selectedImportFileName {
    margin-top: 10px;
    color: #888;
    font-style: italic;
}


/* Modal Styles */
#modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}
#modal-content {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
    max-width: 90vw;
    width: 90%;
    position: relative;
    max-height: 90vh;
    overflow-y: auto;
}
#closeModal {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 1.8em;
    cursor: pointer;
    color: #aaa;
    padding: 0;
    transition: color 0.2s ease;
}
#closeModal:hover {
    color: #666;
}
#modalBody {
    margin-top: 20px; /* Space for close button */
}
#modalBody h2 {
    font-size: 1.8em;
    color: #333;
    margin-bottom: 15px;
    text-align: center;
}
#modalBody audio, #modalBody video { /* Added video for MP4 */
    width: 100%;
    margin-top: 15px;
}
#modalBody iframe {
    width: 100%;
    height: 500px;
    border: 1px solid #ccc;
    margin-top: 20px;
}
#modalBody textarea {
    width: calc(100% - 20px);
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    resize: vertical;
}
#modalBody #submitQuestionButton {
    margin-top: 15px;
    background-color: #007bff;
    font-weight: normal; /* Override bold */
}
#modalBody #submitQuestionButton:hover {
    background-color: #0056b3;
}


/* NEW Feature 1: Highlight and Annotate Styles */
#pdfViewerContainer {
    position: relative;
}

#highlightOverlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allows clicks to pass through to iframe */
    overflow: hidden; /* Prevent highlights from going outside */
}

.highlight {
    background-color: rgba(255, 255, 0, 0.5); /* Semi-transparent yellow */
    position: absolute;
    pointer-events: none; /* Ensures clicks pass through to iframe for selection */
    border-radius: 2px;
}

.annotation-marker {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #007bff; /* Blue marker */
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 0.8em;
    font-weight: bold;
    cursor: pointer;
    pointer-events: auto; /* Make marker clickable */
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    z-index: 10; /* Above highlights */
}
.annotation-marker:hover {
    background-color: #0056b3;
    transform: scale(1.1);
}

#annotationTools {
    margin-top: 15px;
    text-align: center;
}
#annotationInput {
    display: none;
    margin: 15px auto 0;
    width: calc(100% - 40px);
}
#saveAnnotationButton {
    display: none;
    margin: 10px auto 0;
}

#activeAnnotationsList {
    margin-top: 15px;
    border-top: 1px solid #eee;
    padding-top: 15px;
}
#activeAnnotationsList li {
    background-color: #f0f8ff;
    border: 1px solid #e0e0e0;
    padding: 10px 15px;
    margin-bottom: 8px;
    border-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
#activeAnnotationsList li button {
    background-color: #dc3545;
    padding: 5px 10px;
    font-size: 0.8em;
    margin-right: 5px; /* Adjust spacing */
}
#activeAnnotationsList li button:hover {
    background-color: #c82333;
}
.annotation-text {
    flex-grow: 1;
    margin-left: 10px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    /* Header */
    header {
        flex-direction: column;
        align-items: flex-start;
        padding-bottom: 10px;
    }
    header p {
        margin-top: 10px;
    }

    /* Dashboard Layout */
    .dashboard-content-area {
        flex-direction: column;
    }
    aside {
        width: 100%;
        min-height: auto;
        padding-bottom: 15px;
        order: 1; /* Put sidebar above main content on mobile */
    }
    main {
        order: 2; /* Put main content below sidebar on mobile */
        padding: 20px;
    }

    /* Cards and Buttons */
    .card {
        padding: 20px;
    }
    .card h1, .card h2, .card h3 {
        font-size: 1.5em;
    }
    .action-button {
        flex-basis: calc(50% - 10px); /* Two buttons per row on smaller screens */
        font-size: 1em;
        padding: 10px 15px;
    }
    .books-grid {
        grid-template-columns: 1fr; /* Single column on mobile */
    }
    .main-buttons-grid {
        grid-template-columns: 1fr; /* Stack buttons vertically on small screens */
        padding: 15px;
    }
    .main-action-button {
        font-size: 1.4em;
        padding: 20px 15px;
        min-height: 120px;
    }
    .main-action-button i {
        font-size: 2em;
        margin-bottom: 10px;
    }


    /* Welcome Screen */
    #welcome-screen > div {
        padding: 30px;
    }
    #welcome-screen h1 {
        font-size: 1.8em;
    }
    #welcome-screen p {
        font-size: 1em;
    }
    #userNameInput, #startButton {
        padding: 10px;
        font-size: 1em;
    }

    /* Modal */
    #modal-content {
        padding: 20px;
    }
    #modalBody h2 {
        font-size: 1.5em;
    }
    #modalBody iframe {
        height: 400px;
    }

    /* Daily Schedule */
    .daily-schedule-grid {
        grid-template-columns: 1fr; /* Single column on mobile */
    }
    .daily-schedule-grid h3 {
        grid-column: 1 / -1; /* Header spans full width */
    }
    .daily-schedule-item label {
        margin-bottom: 5px;
    }
}
/* General Styling */
body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    background-color: #f0f2f5;
    color: #333;
    direction: rtl; /* For Arabic text direction */
    text-align: right;
}

/* Sidebar */
.sidebar {
    width: 250px;
    background-color: #2c3e50;
    color: white;
    padding: 20px 0;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
}

.sidebar .logo {
    font-size: 1.8em;
    font-weight: bold;
    margin-bottom: 30px;
    color: #4CAF50; /* Green highlight for logo */
}

.sidebar .nav-links {
    list-style: none;
    padding: 0;
    width: 100%;
}

.sidebar .nav-links li {
    width: 100%;
}

.sidebar .nav-links a {
    display: block;
    padding: 15px 25px;
    color: white;
    text-decoration: none;
    font-size: 1.1em;
    transition: background-color 0.3s ease;
}

.sidebar .nav-links a:hover,
.sidebar .nav-links a.active {
    background-color: #34495e;
    border-right: 5px solid #4CAF50;
}

/* Main Content */
.main-content {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto; /* Enable scrolling if content is long */
}

header {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

header h1 {
    margin: 0;
    color: #2c3e50;
}

.content-section {
    background-color: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
    display: none; /* Hidden by default, shown by JS */
}

.content-section.active {
    display: block; /* Show active section */
}

/* Form Elements Styling */
label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
}

input[type="text"],
input[type="number"],
textarea {
    width: calc(100% - 20px);
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1em;
    box-sizing: border-box; /* Include padding in width */
}

textarea {
    resize: vertical;
    min-height: 100px;
}

button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease;
    margin-top: 10px;
}

button:hover {
    background-color: #45a049;
}

/* Table Styling */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #eee;
}

th, td {
    padding: 12px 15px;
    text-align: right;
}

th {
    background-color: #f2f2f2;
    font-weight: bold;
    color: #444;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

/* Progress Bar Styling (Optional, can be added for visual flair) */
.progress-bar-container {
    width: 100%;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin-top: 10px;
}

.progress-bar {
    width: 0%; /* Will be set by JS */
    height: 20px;
    background-color: #4CAF50;
    border-radius: 5px;
    text-align: center;
    color: white;
    line-height: 20px;
    font-size: 0.9em;
}

/* Specific section styles */
.book-list-item {
    background-color: #f9f9f9;
    border: 1px solid #eee;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.book-list-item input[type="number"] {
    width: 80px;
    margin: 0 10px;
}

.question-answer-item {
    background-color: #f9f9f9;
    border: 1px solid #eee;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
}
.question-answer-item h4 {
    margin-top: 0;
    color: #007bff;
}
document.addEventListener('DOMContentLoaded', () => {
    const contentArea = document.getElementById('content-area');
    const navLinks = document.querySelectorAll('.nav-links a');
    const overallProgressDisplay = document.getElementById('overall-progress');

    // Load saved data from localStorage
    let dailySchedule = JSON.parse(localStorage.getItem('dailySchedule')) || {
        'الأحد': '', 'الاثنين': '', 'الثلاثاء': '', 'الأربعاء': '', 'الخميس': '', 'الجمعة': '', 'السبت': ''
    };
    let books = JSON.parse(localStorage.getItem('books')) || []; // { name, totalPages, currentPage }
    let tests = JSON.parse(localStorage.getItem('tests')) || []; // { bookName, questions: [{q, a}] }
    let notes = localStorage.getItem('notes') || '';

    // Function to save data to localStorage
    function saveData() {
        localStorage.setItem('dailySchedule', JSON.stringify(dailySchedule));
        localStorage.setItem('books', JSON.stringify(books));
        localStorage.setItem('tests', JSON.stringify(tests));
        localStorage.setItem('notes', notes);
        updateOverallProgress();
    }

    // Function to update overall progress on home page
    function updateOverallProgress() {
        if (books.length === 0) {
            overallProgressDisplay.textContent = 'لم تبدأ بعد في تتبع أي كتاب.';
            return;
        }

        let totalCompletedPages = 0;
        let totalPossiblePages = 0;

        books.forEach(book => {
            totalCompletedPages += book.currentPage || 0;
            totalPossiblePages += book.totalPages || 0;
        });

        if (totalPossiblePages === 0) {
            overallProgressDisplay.textContent = 'أضف صفحات للكتب لتتبع التقدم الكلي.';
        } else {
            const percentage = (totalCompletedPages / totalPossiblePages) * 100;
            overallProgressDisplay.textContent = `لقد أنهيت ${totalCompletedPages} صفحة من أصل ${totalPossiblePages} صفحة إجمالاً. (${percentage.toFixed(2)}%)`;
        }
    }


    // Function to render sections
    function renderSection(sectionId) {
        // Remove active class from all sections
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });
        // Remove active class from all nav links
        navLinks.forEach(link => link.classList.remove('active'));

        // Add active class to current section and nav link
        const currentSectionElement = document.getElementById(`${sectionId}-section`);
        if (currentSectionElement) {
            currentSectionElement.classList.add('active');
        }
        document.querySelector(`[data-section="${sectionId}"]`).classList.add('active');


        // Render content based on section
        switch (sectionId) {
            case 'home':
                // Content is static HTML, just update progress
                updateOverallProgress();
                break;
            case 'daily-schedule':
                renderDailySchedule();
                break;
            case 'tracking':
                renderTrackingProgress();
                break;
            case 'tests':
                renderTests();
                break;
            case 'notes':
                renderNotes();
                break;
        }
    }

    // Event listener for navigation links
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const sectionId = e.target.dataset.section;
            renderSection(sectionId);
        });
    });

    // --- Daily Schedule Section ---
    function renderDailySchedule() {
        let dailyScheduleHTML = `
            <section id="daily-schedule-section" class="content-section">
                <h2>الجدول اليومي 🗓️</h2>
                <p>قم بتخطيط ما ستقرأه لكل يوم.</p>
                <table>
                    <thead>
                        <tr>
                            <th>اليوم</th>
                            <th>ما سأقرأه</th>
                        </tr>
                    </thead>
                    <tbody>
                        </tbody>
                </table>
            </section>
        `;
        contentArea.innerHTML = dailyScheduleHTML;

        const tbody = document.querySelector('#daily-schedule-section tbody');
        const daysOrder = ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];

        daysOrder.forEach(day => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${day}</td>
                <td>
                    <textarea id="schedule-${day}" placeholder="اكتب هنا ما ستقرأه يوم ${day}"></textarea>
                </td>
            `;
            tbody.appendChild(tr);

            // Populate with saved data
            const textarea = document.getElementById(`schedule-${day}`);
            textarea.value = dailySchedule[day];

            // Add event listener for real-time saving
            textarea.addEventListener('input', (e) => {
                dailySchedule[day] = e.target.value;
                saveData();
            });
        });
    }

    // --- Tracking Progress Section ---
    function renderTrackingProgress() {
        let trackingHTML = `
            <section id="tracking-section" class="content-section">
                <h2>تتبع التقدم 📈</h2>
                <p>أضف كتبك وتتبع تقدمك في القراءة.</p>
                <h3>أضف كتاب جديد:</h3>
                <label for="newBookName">اسم الكتاب:</label>
                <input type="text" id="newBookName" placeholder="مثال: نظرية كل شيء">
                <label for="newBookTotalPages">عدد صفحات الكتاب الإجمالي:</label>
                <input type="number" id="newBookTotalPages" min="1" placeholder="مثال: 300">
                <button onclick="addBook()">أضف الكتاب</button>

                <hr>

                <h3>الكتب التي تتبعها:</h3>
                <div id="booksList">
                    </div>
            </section>
        `;
        contentArea.innerHTML = trackingHTML;
        loadBooksForTracking();
    }

    window.addBook = function() {
        const nameInput = document.getElementById('newBookName');
        const totalPagesInput = document.getElementById('newBookTotalPages');
        const name = nameInput.value.trim();
        const totalPages = parseInt(totalPagesInput.value);

        if (name && totalPages > 0) {
            books.push({ name: name, totalPages: totalPages, currentPage: 0 });
            saveData();
            nameInput.value = '';
            totalPagesInput.value = '';
            loadBooksForTracking();
        } else {
            alert('الرجاء إدخال اسم كتاب صحيح وعدد صفحات أكبر من صفر.');
        }
    }

    function loadBooksForTracking() {
        const booksListDiv = document.getElementById('booksList');
        booksListDiv.innerHTML = ''; // Clear previous list

        if (books.length === 0) {
            booksListDiv.innerHTML = '<p>لم تقم بإضافة أي كتب بعد.</p>';
            return;
        }

        books.forEach((book, index) => {
            const bookItem = document.createElement('div');
            bookItem.classList.add('book-list-item');
            bookItem.innerHTML = `
                <span>${book.name} (إجمالي: ${book.totalPages} صفحة)</span>
                <div>
                    <label for="current-page-${index}">وصلت لصفحة:</label>
                    <input type="number" id="current-page-${index}" min="0" max="${book.totalPages}" value="${book.currentPage || 0}">
                    <span id="progress-percent-${index}"></span>
                </div>
            `;
            booksListDiv.appendChild(bookItem);

            const currentPageInput = document.getElementById(`current-page-${index}`);
            const progressPercentSpan = document.getElementById(`progress-percent-${index}`);

            // Initial calculation
            updateBookProgress(book, currentPageInput, progressPercentSpan);

            currentPageInput.addEventListener('input', (e) => {
                let newPage = parseInt(e.target.value);
                if (isNaN(newPage) || newPage < 0) newPage = 0;
                if (newPage > book.totalPages) newPage = book.totalPages;

                books[index].currentPage = newPage;
                saveData();
                updateBookProgress(book, currentPageInput, progressPercentSpan);
            });
        });
    }

    function updateBookProgress(book, inputElement, percentElement) {
        const progress = (book.currentPage / book.totalPages) * 100;
        percentElement.textContent = `${progress.toFixed(2)}%`;
        inputElement.value = book.currentPage; // Ensure input reflects clamped value
    }

    // --- Tests Section ---
    function renderTests() {
        let testsHTML = `
            <section id="tests-section" class="content-section">
                <h2>الاختبارات 📝</h2>
                <p>أضف أسئلة وأجوبة لكل كتاب لتساعدك على المراجعة.</p>

                <h3>اختر كتاب لإضافة أسئلة/أجوبة:</h3>
                <select id="testBookSelect">
                    <option value="">-- اختر كتاباً --</option>
                    ${books.map(book => `<option value="${book.name}">${book.name}</option>`).join('')}
                </select>
                <button onclick="addBookToTest()">أضف كتاب للاختبار</button>

                <div id="testArea" style="display: none; margin-top: 20px;">
                    <h3 id="currentTestBookName"></h3>
                    <div id="questionsList">
                        </div>
                    <h4>أضف سؤال جديد:</h4>
                    <label for="newQuestion">السؤال:</label>
                    <input type="text" id="newQuestion" placeholder="اكتب سؤالك هنا">
                    <label for="newAnswer">الجواب:</label>
                    <textarea id="newAnswer" placeholder="اكتب الجواب هنا"></textarea>
                    <button onclick="addQuestionAnswer()">أضف سؤال وجواب</button>
                </div>

                <hr>

                <h3>الاختبارات المضافة:</h3>
                <div id="addedTestsList">
                    </div>
            </section>
        `;
        contentArea.innerHTML = testsHTML;
        loadTestsSummary();
    }

    window.addBookToTest = function() {
        const select = document.getElementById('testBookSelect');
        const selectedBookName = select.value;
        const testArea = document.getElementById('testArea');
        const currentTestBookName = document.getElementById('currentTestBookName');

        if (selectedBookName) {
            currentTestBookName.textContent = `أسئلة وأجوبة لكتاب: ${selectedBookName}`;
            testArea.style.display = 'block';
            loadQuestionsForBook(selectedBookName); // Load existing questions for selected book
        } else {
            testArea.style.display = 'none';
        }
    }

    window.addQuestionAnswer = function() {
        const selectedBookName = document.getElementById('testBookSelect').value;
        const questionInput = document.getElementById('newQuestion');
        const answerInput = document.getElementById('newAnswer');
        const question = questionInput.value.trim();
        const answer = answerInput.value.trim();

        if (selectedBookName && question && answer) {
            let bookTest = tests.find(t => t.bookName === selectedBookName);
            if (!bookTest) {
                bookTest = { bookName: selectedBookName, questions: [] };
                tests.push(bookTest);
            }
            bookTest.questions.push({ q: question, a: answer });
            saveData();
            questionInput.value = '';
            answerInput.value = '';
            loadQuestionsForBook(selectedBookName);
            loadTestsSummary(); // Update summary after adding
        } else {
            alert('الرجاء اختيار كتاب وكتابة سؤال وجواب.');
        }
    }

    function loadQuestionsForBook(bookName) {
        const questionsListDiv = document.getElementById('questionsList');
        questionsListDiv.innerHTML = '';
        const bookTest = tests.find(t => t.bookName === bookName);

        if (bookTest && bookTest.questions.length > 0) {
            bookTest.questions.forEach((qa, index) => {
                const qaItem = document.createElement('div');
                qaItem.classList.add('question-answer-item');
                qaItem.innerHTML = `
                    <h4>سؤال ${index + 1}:</h4>
                    <p><strong>السؤال:</strong> ${qa.q}</p>
                    <p><strong>الجواب:</strong> ${qa.a}</p>
                    <button onclick="deleteQuestion(${tests.indexOf(bookTest)}, ${index})">حذف</button>
                `;
                questionsListDiv.appendChild(qaItem);
            });
        } else {
            questionsListDiv.innerHTML = '<p>لا توجد أسئلة أو أجوبة مضافة لهذا الكتاب بعد.</p>';
        }
    }

    window.deleteQuestion = function(bookTestIndex, questionIndex) {
        if (confirm('هل أنت متأكد من حذف هذا السؤال؟')) {
            const selectedBookName = document.getElementById('testBookSelect').value;
            tests[bookTestIndex].questions.splice(questionIndex, 1);
            if (tests[bookTestIndex].questions.length === 0) {
                tests.splice(bookTestIndex, 1); // Remove book if no questions left
            }
            saveData();
            loadQuestionsForBook(selectedBookName); // Reload current book's questions
            loadTestsSummary(); // Update summary
        }
    }

    function loadTestsSummary() {
        const addedTestsListDiv = document.getElementById('addedTestsList');
        addedTestsListDiv.innerHTML = '';

        if (tests.length === 0) {
            addedTestsListDiv.innerHTML = '<p>لم تتم إضافة أي اختبارات للكتب بعد.</p>';
            return;
        }

        tests.forEach(bookTest => {
            const summaryItem = document.createElement('div');
            summaryItem.classList.add('book-list-item');
            summaryItem.style.flexDirection = 'column';
            summaryItem.style.alignItems = 'flex-start';
            summaryItem.innerHTML = `
                <h4>${bookTest.bookName}</h4>
                <p>عدد الأسئلة: ${bookTest.questions.length}</p>
                <button onclick="viewBookQuestions('${bookTest.bookName}')">عرض/تعديل الأسئلة</button>
            `;
            addedTestsListDiv.appendChild(summaryItem);
        });
    }

    window.viewBookQuestions = function(bookName) {
        const select = document.getElementById('testBookSelect');
        select.value = bookName; // Set selected book in dropdown
        window.addBookToTest(); // Trigger function to display its questions
    }


    // --- Notes Section ---
    function renderNotes() {
        let notesHTML = `
            <section id="notes-section" class="content-section">
                <h2>الملحوظات ✍️</h2>
                <p>اكتب ملاحظاتك بحرية هنا.</p>
                <textarea id="notesArea" placeholder="اكتب ملاحظاتك..."></textarea>
                <button onclick="saveNotes()">حفظ الملحوظات</button>
            </section>
        `;
        contentArea.innerHTML = notesHTML;
        const notesTextArea = document.getElementById('notesArea');
        notesTextArea.value = notes; // Load saved notes

        // Auto-save on input
        notesTextArea.addEventListener('input', (e) => {
            notes = e.target.value;
            saveData(); // Save automatically as user types
        });
    }

    window.saveNotes = function() {
        // Notes are already saved on input, this button just gives a confirmation feeling
        alert('تم حفظ الملحوظات!');
    }


    // Initialize the application: render home section by default
    renderSection('home');
    updateOverallProgress(); // Ensure initial progress is shown
});
